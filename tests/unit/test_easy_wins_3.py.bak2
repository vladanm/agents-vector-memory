"""
Easy Wins Test Suite - Part 3
==============================

Final push to reach 76% coverage.
Targets:
- Large document chunking (triggers code fence validation)
- Various memory types with auto_chunk
- Edge cases in chunking logic

Target: +2-3% to reach 76%+
"""

import pytest
import tempfile
import os

from src.session_memory_store import SessionMemoryStore


class TestLargeDocumentChunking:
    """Test chunking with large documents containing code blocks."""

    @pytest.fixture
    def store(self):
        """Create temporary store."""
        with tempfile.TemporaryDirectory() as tmpdir:
            db_path = os.path.join(tmpdir, "test.db")
            store = SessionMemoryStore(db_path)
            yield store

    def test_store_large_document_with_code_blocks(self, store):
        """Test storing large document with code blocks to trigger fence validation."""
        # Create a large document with code blocks to trigger chunking validation
        large_doc = """# Programming Guide

## Introduction
This is a comprehensive programming guide.

## Python Examples

### Example 1: Hello World
```python
def hello_world():
    print("Hello, World!")
    return True
```

### Example 2: Data Processing
```python
def process_data(data):
    result = []
    for item in data:
        result.append(item * 2)
    return result
```

### Example 3: File Operations
```python
def read_file(path):
    with open(path, 'r') as f:
        return f.read()
```

## JavaScript Examples

### Example 4: Async Functions
```javascript
async function fetchData() {
    const response = await fetch('/api/data');
    return await response.json();
}
```

### Example 5: Event Handling
```javascript
document.addEventListener('click', function(e) {
    console.log('Clicked:', e.target);
});
```

## More Content

""" * 20  # Repeat to make it large enough to chunk

        # Store with auto_chunk enabled - should trigger code fence validation
        result = store.store_memory(
            memory_type="knowledge_base",
            agent_id="test-agent",
            session_id="test-session",
            content=large_doc,
            auto_chunk=True
        )

        assert result["success"] is True
        assert "chunks_created" in result or "success" in result

    def test_store_document_with_unbalanced_code_fences(self, store):
        """Test document with potentially unbalanced code fences."""
        # Create a document that might trigger unbalanced fence detection
        unbalanced_doc = """# Code Examples

## Example 1
```python
def function_one():
    return 1
```

## Example 2
```python
def function_two():
    return 2
```

## Example 3
```python
def function_three():
    return 3
```

## Example 4
```python
def function_four():
    return 4
```

## Example 5
```python
def function_five():
    return 5
```
""" * 50  # Large enough to potentially split code blocks

        result = store.store_memory(
            memory_type="knowledge_base",
            agent_id="test-agent",
            session_id="test-session",
            content=unbalanced_doc,
            auto_chunk=True
        )

        assert result["success"] is True

    def test_store_mixed_content_with_chunking(self, store):
        """Test mixed markdown content with chunking."""
        mixed_content = """# Technical Documentation

## Section 1: Overview
This section provides an overview of the system.

### Subsection 1.1: Architecture
The system uses a microservices architecture.

```python
# Configuration
config = {
    'host': 'localhost',
    'port': 8080
}
```

## Section 2: Implementation

### Subsection 2.1: Backend
The backend is implemented in Python.

```python
def initialize_backend():
    db = connect_database()
    api = start_api_server()
    return db, api
```

### Subsection 2.2: Frontend
The frontend uses React.

```javascript
function App() {
    return <div>Hello</div>;
}
```

## Section 3: Deployment

### Subsection 3.1: Docker
Use Docker for deployment.

```bash
docker build -t myapp .
docker run -p 8080:8080 myapp
```

## Section 4: Monitoring

### Subsection 4.1: Metrics
Monitor key metrics.

```yaml
metrics:
  - cpu_usage
  - memory_usage
  - request_count
```

""" * 30  # Make it large

        result = store.store_memory(
            memory_type="knowledge_base",
            agent_id="test-agent",
            session_id="test-session",
            content=mixed_content,
            auto_chunk=True
        )

        assert result["success"] is True


class TestAutoChunkWithDifferentMemoryTypes:
    """Test auto_chunk with different memory types."""

    @pytest.fixture
    def store(self):
        """Create temporary store."""
        with tempfile.TemporaryDirectory() as tmpdir:
            db_path = os.path.join(tmpdir, "test.db")
            store = SessionMemoryStore(db_path)
            yield store

    def test_auto_chunk_working_memory(self, store):
        """Test auto_chunk with working_memory type."""
        content = "# Working Memory\n\n" + "Working memory content. " * 500

        result = store.store_memory(
            memory_type="working_memory",
            agent_id="test-agent",
            session_id="test-session",
            content=content,
            auto_chunk=True
        )

        assert result["success"] is True

    def test_auto_chunk_reports(self, store):
        """Test auto_chunk with reports type."""
        content = "# Report\n\n## Findings\n\n" + "Report finding details. " * 500

        result = store.store_memory(
            memory_type="reports",
            agent_id="test-agent",
            session_id="test-session",
            content=content,
            auto_chunk=True
        )

        assert result["success"] is True

    def test_auto_chunk_system_memory(self, store):
        """Test auto_chunk with system_memory type."""
        content = "# System Configuration\n\n" + "System config details. " * 500

        result = store.store_memory(
            memory_type="system_memory",
            agent_id="test-agent",
            session_id="test-session",
            content=content,
            auto_chunk=True
        )

        assert result["success"] is True


class TestChunkingWithMetadata:
    """Test chunking behavior with various metadata."""

    @pytest.fixture
    def store(self):
        """Create temporary store."""
        with tempfile.TemporaryDirectory() as tmpdir:
            db_path = os.path.join(tmpdir, "test.db")
            store = SessionMemoryStore(db_path)
            yield store

    def test_store_with_title_and_chunking(self, store):
        """Test storing content with title and chunking."""
        content = "# Document\n\n" + "Content section. " * 300

        result = store.store_memory(
            memory_type="knowledge_base",
            agent_id="test-agent",
            session_id="test-session",
            content=content,
            title="Test Document Title",
            auto_chunk=True
        )

        assert result["success"] is True

    def test_store_with_description_and_chunking(self, store):
        """Test storing content with description and chunking."""
        content = "# Guide\n\n" + "Guide content. " * 300

        result = store.store_memory(
            memory_type="knowledge_base",
            agent_id="test-agent",
            session_id="test-session",
            content=content,
            description="Comprehensive guide on the topic",
            auto_chunk=True
        )

        assert result["success"] is True

    def test_store_with_tags_and_chunking(self, store):
        """Test storing content with tags and chunking."""
        content = "# Tagged Content\n\n" + "Tagged sections. " * 300

        result = store.store_memory(
            memory_type="knowledge_base",
            agent_id="test-agent",
            session_id="test-session",
            content=content,
            tags=["documentation", "guide", "reference"],
            auto_chunk=True
        )

        assert result["success"] is True

    def test_store_with_metadata_dict_and_chunking(self, store):
        """Test storing content with metadata dict and chunking."""
        content = "# Metadata Test\n\n" + "Content with metadata. " * 300

        result = store.store_memory(
            memory_type="knowledge_base",
            agent_id="test-agent",
            session_id="test-session",
            content=content,
            metadata={
                "version": "1.0",
                "author": "Test Author",
                "category": "Technical"
            },
            auto_chunk=True
        )

        assert result["success"] is True


class TestSearchAfterChunking:
    """Test search operations on chunked content."""

    @pytest.fixture
    def store(self):
        """Create temporary store."""
        with tempfile.TemporaryDirectory() as tmpdir:
            db_path = os.path.join(tmpdir, "test.db")
            store = SessionMemoryStore(db_path)
            yield store

    def test_search_chunked_knowledge_base(self, store):
        """Test searching chunked knowledge base content."""
        # Store large chunked content
        content = """# Machine Learning Guide

## Introduction to ML
Machine learning is a subset of artificial intelligence.

## Types of Learning

### Supervised Learning
Supervised learning uses labeled data.

### Unsupervised Learning
Unsupervised learning finds patterns in unlabeled data.

### Reinforcement Learning
Reinforcement learning learns through rewards.

""" * 50

        store.store_memory(
            memory_type="knowledge_base",
            agent_id="test-agent",
            session_id="test-session",
            content=content,
            auto_chunk=True
        )

        # Search the chunked content
        result = store.search_memories(
            memory_type="knowledge_base",
            agent_id="test-agent",
            session_id="test-session",
            query="supervised learning",
            limit=5
        )

        assert result["success"] is True

    def test_search_with_granularity_on_chunked_content(self, store):
        """Test granularity search on chunked content."""
        content = """# Deep Learning

## Neural Networks
Neural networks are inspired by biological neurons.

## Activation Functions
Common activation functions include ReLU and sigmoid.

## Training Process
Training involves forward and backward propagation.

""" * 40

        store.store_memory(
            memory_type="knowledge_base",
            agent_id="test-agent",
            session_id="test-session",
            content=content,
            auto_chunk=True
        )

        # Search with full_documents granularity
        result = store.search.search_with_granularity(
            memory_type="knowledge_base",
            granularity="full_documents",
            query="neural networks",
            agent_id="test-agent",
            session_id="test-session"
        )

        assert result["success"] is True


class TestEdgeCasesInSessionMemoryStore:
    """Test remaining edge cases in session_memory_store.py."""

    @pytest.fixture
    def store(self):
        """Create temporary store."""
        with tempfile.TemporaryDirectory() as tmpdir:
            db_path = os.path.join(tmpdir, "test.db")
            store = SessionMemoryStore(db_path)
            yield store

    def test_store_memory_with_very_long_title(self, store):
        """Test storing memory with very long title."""
        long_title = "A" * 500

        result = store.store_memory(
            memory_type="knowledge_base",
            agent_id="test-agent",
            session_id="test-session",
            content="Content with long title",
            title=long_title
        )

        # Should handle or truncate gracefully
        assert result is not None

    def test_store_memory_with_very_long_description(self, store):
        """Test storing memory with very long description."""
        long_description = "D" * 2000

        result = store.store_memory(
            memory_type="knowledge_base",
            agent_id="test-agent",
            session_id="test-session",
            content="Content with long description",
            description=long_description
        )

        # Should handle or truncate gracefully
        assert result is not None

    def test_store_memory_with_many_tags(self, store):
        """Test storing memory with many tags."""
        many_tags = [f"tag{i}" for i in range(50)]

        result = store.store_memory(
            memory_type="knowledge_base",
            agent_id="test-agent",
            session_id="test-session",
            content="Content with many tags",
            tags=many_tags
        )

        # Should handle or limit gracefully
        assert result is not None

    def test_reconstruct_document_with_no_chunks(self, store):
        """Test reconstruct_document on non-chunked content."""
        # Store without chunking
        result = store.store_memory(
            memory_type="knowledge_base",
            agent_id="test-agent",
            session_id="test-session",
            content="Small content without chunks",
            auto_chunk=False
        )

        memory_id = result["memory"]["id"]

        # Try to reconstruct
        recon_result = store.reconstruct_document(memory_id)

        # Should handle gracefully
        assert isinstance(recon_result, dict)


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
