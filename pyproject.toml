[project]
name = "vector-memory-mcp"
version = "2.0.0"
description = "Session-scoped vector memory storage with semantic search via sqlite-vec for MCP servers"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [
    { name = "Vector Memory Team", email = "info@example.com" }
]
keywords = ["mcp", "vector-search", "sqlite", "semantic-search", "embeddings"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database",
]

dependencies = [
    "mcp~=1.0.0",
    "sqlite-vec~=0.1.6",
    "sentence-transformers>=2.2.2",
    "tiktoken~=0.5.1",
    "pyyaml~=6.0",
    "langchain-text-splitters~=0.3.0",
    "numpy>=1.24.0",
]

[project.optional-dependencies]
dev = [
    "pytest~=8.3.0",
    "pytest-asyncio~=0.23.0",
    "pytest-cov~=5.0.0",
    "mypy~=1.8.0",
    "ruff~=0.3.0",
    "black~=24.3.0",
]

[project.urls]
Homepage = "https://github.com/example/vector-memory-mcp"
Documentation = "https://github.com/example/vector-memory-mcp#readme"
Repository = "https://github.com/example/vector-memory-mcp"
Issues = "https://github.com/example/vector-memory-mcp/issues"

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["src"]

[tool.setuptools.package-data]
src = ["py.typed"]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
pythonpath = ["."]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "sentence_transformers.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tiktoken.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "sqlite_vec.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "langchain_text_splitters.*"
ignore_missing_imports = true

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | venv
  | __pycache__
  | \.pytest_cache
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
precision = 2
skip_empty = true
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "@abstractmethod",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "\\.\\.\\.",
]
